       	     +-------------------------+
		     |			EE 415	  	   |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Celso Moraes <asura254@kaist.ac.kr>
ChangHwan Kim <kimbob@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk
{
    off_t length;						/* File size in bytes. */
    unsigned magic;						/* Magic number. */
	uint32_t is_dir;					/* Is this inode for directory? */
	block_sector_t parent_dir;			/* Parent dir's sector for dir inode */
	block_sector_t d_indirect_sector;	/* Sector # of double indirect ptr */
	uint32_t sector_cnt;				/* # of data sectors for this inode */
    uint32_t unused[122];				/* Not used. */
};

/* One indirect inode sector */
struct indirect_sector {
	block_sector_t inode[128];
};

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

- Each inode takes 512Bytes
- Each indirect inode block points to 128 inodes
- There is a one double indirect inode that points to 128 indirect inodes
	=> Total: 128 * 128 * 512Bytes = 8192 KB = 8 MB 

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We used inode_lock for each opened inode to avoid race condition.
Before any processes try to write to the file, it must acuiqre inode_lock.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

We prevent the reading process from reading new data in such updated file.
If a file is being written, that data is not updated to the disk yet.
Therefore, reading process can't see the updated contents during other
process's writing time.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

We only locked a file when one process wirintng on it.
That is, file isn't locked when it is read.
Therefore, there is no such case that reader process indefinitely blocks
other process from writing to file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We did not implement multi-level index inode, as it is more difficault to
implement. It would be more space efficient and fast to use multi-level index,
but we choose more simple approach which always uses double indirect block.
However, it needs more disk access to get the address of inode.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
{
	... /* Not for directory data structure */ ...

	uint32_t is_dir;				/* Is this inode for directory? */
	block_sector_t parent_dir;		/* Parent dir's sector for dir inode */

	... /* Not for directory data structure */ ...
};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

First, we extracts each directory name in between '/' character.
If it starts from '/', then we search from root directory, otherwise
from process's current working directory.
When we encounter name which is assigned to file, but user pass it for
directory name, then it returns false to indicate error.
Lastly, we check whether user-provided path is ended with '/',
if so, then it should be directory, otherwise file.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We use inode lock for each opened inode, and it can also provide prevention
for directory entry. For any process which try to modify directory contents,
it should first acquire inode lock. Therefore, there can't be simultaneous
modification attempts to the same directory entry.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We do not allow a directory to be removed if it is currently opened by
other processes. But, if it is used only by one process's current working
directory, then it can be removed. But, after removing that directory,
any further operations to that directory will be failed.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We chose to each thread contains directory data structure for their working
directory. By doing this, pintos can easily find out contents of
thread's working directory, then search through that directory inside.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
